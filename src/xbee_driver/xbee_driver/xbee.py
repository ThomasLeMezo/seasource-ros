import rclpy
from rclpy.node import Node
from digi.xbee.devices import *
import socket

from seasource_audio.srv import FileSelection
from seasource_audio.srv import ParametersUpdate
from gpsd_client.msg import GpsFix


class XbeeNode(Node):

    def __init__(self):
        super().__init__('xbee_node')

        # Interfaces
        self.subscription_gnss_data = None
        self.client_file_selection = None
        self.client_parameters_update = None

        # Get hostname of device
        self.hostname = socket.gethostname()
        # limit size
        self.hostname = self.hostname[:20] if len(self.hostname) >= 21 else self.hostname

        # Parameters
        self.xbee_network_id = 0x42
        self.xbee_encryption_key = "ABCDEFGHIFKLMNOP"
        self.xbee_node_id = self.hostname
        self.time_between_communication = 5  # in seconds
        self.serial_baudrate = 9600

        self.serial_port = "/dev/xbee" # generated by udev rules

        # Initialization
        self.init_interfaces()
        self.init_parameters()

        self.timer = self.create_timer(self.time_between_communication, self.timer_callback)

        # Connect to xbee
        # https://xbplib.readthedocs.io/en/latest/index.html
        self.xbee = XBeeDevice(self.serial_port, self.serial_baudrate)
        self.xbee.open()

        self.configure_xbee()

    def __del__(self):
        self.xbee.close()

    def configure_xbee(self):
        self.xbee.read_device_info()
        self.xbee.set_node_id(self.xbee_node_id)

        # Set network id
        print("Set network ID")
        self.xbee.set_parameter('ID', self.xbee_network_id.to_bytes(2, 'big'))

        # Set encryption key
        print("Set encryption key")
        self.xbee.set_parameter('KY', bytearray(self.xbee_encryption_key, 'utf-8'))

        # Set encryption enable
        print("Enable Encryption")
        self.xbee.set_parameter('EE', b'\x01')

        # Apply changes.
        print("Apply changes & write")
        self.xbee.apply_changes()
        # Write changes (to flash).
        self.xbee.write_changes()

        self.xbee.add_data_received_callback(self.data_received_callback)

    def data_received_callback(self, xbee_message):
        address = xbee_message.remote_device.get_64bit_addr()
        data = xbee_message.data.decode("utf8")
        print("Received data from %s: %s" % (address, data))

        # First byte is the command
        command = data[0]
        if command == 0:  # File selection case
            # Read the file id
            file_id = data[1]
            # Call the service
            self.send_request_file_selection(file_id)
        elif command == 1:  # Parameters update case
            # Read the parameters 16-bit integer (2 bytes), in seconds in xbee message
            sound_phase_shift_from_posix = (data[1] << 8 | data[2]) * 1000  # in milliseconds
            sound_duration_between_play = (data[3] << 8 | data[4]) * 1000  # in milliseconds
            # Call the service
            self.send_request_parameters_update(sound_phase_shift_from_posix, sound_duration_between_play)

    def init_parameters(self):
        self.declare_parameter('serial_port', self.serial_port)
        self.declare_parameter('serial_baudrate', self.serial_baudrate)
        self.declare_parameter('xbee_node_id', self.xbee_node_id)
        self.declare_parameter('time_between_communication', self.time_between_communication)  # in seconds
        self.declare_parameter('xbee_encryption_key', self.xbee_encryption_key)  # 16 bytes
        self.declare_parameter('xbee_network_id', self.xbee_network_id)  # between 0x0 and 0x7FFF

        self.serial_port = self.get_parameter('serial_port').get_parameter_value().string_value
        self.serial_baudrate = self.get_parameter('serial_baudrate').get_parameter_value().integer_value
        self.time_between_communication = self.get_parameter(
            'time_between_communication').get_parameter_value().integer_value
        self.xbee_node_id = self.get_parameter('xbee_node_id').get_parameter_value().string_value
        self.xbee_encryption_key = self.get_parameter('xbee_encryption_key').get_parameter_value().string_value
        self.xbee_network_id = self.get_parameter('xbee_network_id').get_parameter_value().integer_value

    def init_interfaces(self):
        self.subscription_gnss_data = self.create_subscription(GpsFix, '/driver/fix', self.gpsd_callback, 10)
        self.client_file_selection = self.create_client(FileSelection, '/file_selection')
        self.client_parameters_update = self.create_client(ParametersUpdate, '/parameters_update')

    def gpsd_callback(self, msg):
        self.valid_fix = msg.mode > GpsFix.MODE_NO_FIX
        self.fix_latitude = msg.latitude
        self.fix_longitude = msg.longitude

    def timer_callback(self):
        # Send data to xbee : lat long fix as two integers
        lat = int(self.fix_latitude*1e5)
        lon = int(self.fix_longitude*1e5)
        # 0 is the command
        data = bytes([0,
                      (lat >> 16) & 0xFF, (lat >> 8) & 0xFF, lat & 0xFF,
                      (lon >> 16) & 0xFF, (lon >> 8) & 0xFF, lon & 0xFF])
        self.xbee.send_data_broadcast(data)

    # File selection service call
    def send_request_file_selection(self, file_id):
        request = FileSelection.Request()
        request.audio_file_id = file_id
        self.future = self.client_file_selection.call_async(self.req)
        rclpy.spin_until_future_complete(self, self.future)
        return self.future.result()

    # Parameters update service call
    def send_request_parameters_update(self, sound_phase_shift_from_posix, sound_duration_between_play):
        request = ParametersUpdate.Request()
        request.sound_duration_between_play = sound_duration_between_play
        request.sound_phase_shift_from_posix = sound_phase_shift_from_posix
        self.future = self.client_parameters_update.call_async(self.req)
        rclpy.spin_until_future_complete(self, self.future)
        return self.future.result()


def main(args=None):
    rclpy.init(args=args)

    xbee_node = XbeeNode()
    rclpy.spin(xbee_node)

    xbee_node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
